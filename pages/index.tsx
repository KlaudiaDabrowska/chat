import type { NextPage } from "next";
import Head from "next/head";
import { ReactNode, useEffect, useRef, useState } from "react";
import styles from "../styles/Home.module.css";
import { Box, Card, Container, FormControl, TextField } from "@mui/material";
import { io, Socket } from "socket.io-client";

const Home: NextPage = () => {
  const [message, setMessage] = useState<string>("");
  const [messageList, setMessageList] = useState<string[]>([]);
  const [socket, setSocket] = useState<Socket | null>(null);
  const fieldRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const newSocket = io(`http://${window.location.hostname}:3000`);
    newSocket?.on("connected", (arg) => {
      addMessageToList(arg);
    });

    newSocket?.on("message", (arg) => {
      addMessageToList(arg);
    });

    setSocket(newSocket);
    return () => {
      newSocket?.close();
      newSocket.removeAllListeners();
    };
  }, []);

  useEffect(() => {
    if (fieldRef.current) {
      fieldRef.current?.scrollIntoView({
        behavior: "smooth",
        block: "nearest",
      });
    }
  }, [message]);

  const addMessageToList = (message: string) => {
    // console.log(messageList);
    // const arrayCopy = [...messageList];
    // arrayCopy.push(message);
    // console.log(arrayCopy);
    // setMessageList(arrayCopy);
    setMessageList((prevState) => {
      return [...prevState, message];
    });
  };

  const mapArray = (): ReactNode => {
    return messageList.map((message, index) => {
      return (
        <Box
          sx={{
            width: 300,
            height: 30,
            backgroundColor: "info.main",
            marginBottom: "10px",
            borderRadius: "5px",
          }}
          key={message + `${index}`}
        >
          {message}
        </Box>
      );
    });
  };

  const handleSending = () => {
    if (message != null) {
      addMessageToList(message);
      socket?.emit("message", message);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setMessage(e.target.value);
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    handleSending();
    setMessage("");
  };

  const addAnotherMessage = () => {
    return addMessageToList("innyEvent");
  };

  // useEffect(() => {
  //   setTimeout(() => {
  //     addMessageToList("3 sek");
  //   }, 3000);
  // }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth="md" sx={{ paddingTop: "2rem" }}>
        <Card
          variant="outlined"
          sx={{
            minHeight: "200px",
            height: "80vh",
            padding: "10px",
            overflow: "auto",
            borderColor: "blue",
          }}
          onClick={addAnotherMessage}
        >
          {mapArray()}
          <div ref={fieldRef}></div>
        </Card>
        <FormControl
          onSubmit={handleSubmit}
          component="form"
          sx={{ marginTop: "10px", width: "100%" }}
        >
          <TextField
            fullWidth
            placeholder="Your message"
            onChange={handleChange}
            value={message}
            autoComplete="off"
          />
        </FormControl>
      </Container>
    </div>
  );
};

export default Home;
